{"paragraphs":[{"text":"%md ##Event Statistics using Scala","user":"anonymous","dateUpdated":"2017-02-12T18:50:59-0500","config":{"editorMode":"ace/mode/markdown","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>##Event Statistics using Scala</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1486847799866_-154789226","id":"20170126-084346_411967885","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-12T18:50:59-0500","dateFinished":"2017-02-12T18:51:01-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2133"},{"title":"Event Statistics using Scala","text":"// any import statements go here\nimport org.apache.spark.rdd.RDD\nimport org.apache.commons.io.IOUtils\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.net.URL\nimport java.nio.charset.Charset\nimport org.apache.spark.sql._","user":"anonymous","dateUpdated":"2017-02-13T00:50:31-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"title":false,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark.rdd.RDD\n\nimport org.apache.commons.io.IOUtils\n\nimport java.text.SimpleDateFormat\n\nimport java.util.Date\n\nimport java.net.URL\n\nimport java.nio.charset.Charset\n\nimport org.apache.spark.sql._\n"}]},"apps":[],"jobName":"paragraph_1486847799876_-172487675","id":"20170125-092928_572765858","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T00:50:31-0500","dateFinished":"2017-02-13T00:51:01-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2134"},{"title":"Then, load data. We uploaded the data on S3 for easier loading","text":"// load raw data\n\ndef loadFromUrl(url:String) = \n    sc.parallelize(\n        IOUtils.toString(\n            new URL(url),\n            Charset.forName(\"utf8\")).split(\"\\n\"))\n            \nval events = loadFromUrl(\"https://s3.amazonaws.com/6250bdh-hw/hw2/train/events.csv\")\nval mortality = loadFromUrl(\"https://s3.amazonaws.com/6250bdh-hw/hw2/train/mortality.csv\")\n","user":"anonymous","dateUpdated":"2017-02-13T00:51:04-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nloadFromUrl: (url: String)org.apache.spark.rdd.RDD[String]\n\nevents: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[0] at parallelize at <console>:39\n\nmortality: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[1] at parallelize at <console>:39\n"}]},"apps":[],"jobName":"paragraph_1486847799878_-171718177","id":"20170125-102007_1054430570","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T00:51:04-0500","dateFinished":"2017-02-13T00:51:33-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2135"},{"text":"import java.util.Date\n// Define case class\ncase class Event(patientId: String, category: String, event: String, date: java.util.Date, value: Double)\ncase class Mortality(patientId: String, mortality_date:  java.util.Date, label: Double)\n","user":"anonymous","dateUpdated":"2017-02-13T01:04:33-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport java.util.Date\n\ndefined class Event\n\ndefined class Mortality\n"}]},"apps":[],"jobName":"paragraph_1486847799879_-172102926","id":"20170125-093656_1081259042","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:04:33-0500","dateFinished":"2017-02-13T01:04:34-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2136"},{"text":"\n// Define date format\nval dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\")","user":"anonymous","dateUpdated":"2017-02-13T01:04:37-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndateFormat: java.text.SimpleDateFormat = java.text.SimpleDateFormat@f67a0200\n"}]},"apps":[],"jobName":"paragraph_1486847799884_-175565666","id":"20170205-182828_2037956217","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:04:37-0500","dateFinished":"2017-02-13T01:04:37-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2137"},{"text":"\n// Load events & mortality into their corresponding RDD\n//val sub = \"0.0\"\nval eventsRDD: RDD[Event] = events.map(s=>s.split(\",\")).map{s=>\n    var value = 0.0\n    if(!s(4).trim().isEmpty())\n        value = s(4).toDouble\n        Event(s(0), s(1), s(2),dateFormat.parse(s(3).asInstanceOf[String]), value)}\n        \nval mortalityRDD: RDD[Mortality] = mortality.map(s=>s.split(\",\")).map(s=>Mortality(s(0), dateFormat.parse(s(1).asInstanceOf[String]), s(2).toDouble))\n//val eventsRDD: RDD[Event] = events.map(s=>s.split(\",\",-1)).filter(!_(4).trim.isEmpty()).map(s=>Event(s(0), s(1), s(2),dateFormat.parse(s(3).asInstanceOf[String]), s(4).toDouble))\n//val mortalityRDD: RDD[Mortality] = mortality.map(s=>s.split(\",\")).map(s=>Mortality(s(0), dateFormat.parse(s(1).asInstanceOf[String]), s(2).toDouble))","user":"anonymous","dateUpdated":"2017-02-13T01:05:31-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\neventsRDD: org.apache.spark.rdd.RDD[Event] = MapPartitionsRDD[7] at map at <console>:48\n\nmortalityRDD: org.apache.spark.rdd.RDD[Mortality] = MapPartitionsRDD[9] at map at <console>:45\n"}]},"apps":[],"jobName":"paragraph_1486847799909_-185184389","id":"20170125-103206_1230836042","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:05:31-0500","dateFinished":"2017-02-13T01:05:34-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2138"},{"title":"Event count is defined as the number of events recorded for a given patient","text":"def event_count_metrics(eve: RDD[(Event)], mor: RDD[(Mortality)]) : (Double, Double, Double, Double, Double, Double) = {\n    \n    val sqlContext = new org.apache.spark.sql.SQLContext(sc)\n    val events_temp = eve.map(Event=> (Event.patientId,Event.category)).toDF(\"patientid\",\"eventid\")\n    val mortality_temp = mor.map(Mortality=>(Mortality.patientId, Mortality.label)).toDF(\"patientid\", \"label\")\n\n    mortality_temp.registerTempTable(\"mortality\")\n    events_temp.registerTempTable(\"events\")\n    val alive = sqlContext.sql(\"select * from events where events.patientid not in (select mortality.patientid from mortality)\")\n    alive.registerTempTable(\"alive\")\n    val dead = sqlContext.sql(\"select * from events where events.patientid in (select mortality.patientid from mortality)\")\n    dead.registerTempTable(\"dead\")\n\n    // TODO : Implement this function to return the event count metrics.\n    val alive_patients = sqlContext.sql(\"select avg(e_count),min(e_count), max(e_count) from (select count(*) as e_count from alive group by patientid)\")\n    val avg_alive_event_count = alive_patients.head().getDouble(0)\n    val min_alive_event_count = alive_patients.head().getLong(1)\n    val max_alive_event_count = alive_patients.head().getLong(2)\n    \n    val dead_patients = sqlContext.sql(\"select avg(e_count),min(e_count), max(e_count) from (select count(*) as e_count from dead group by patientid)\")\n    val avg_dead_event_count = dead_patients.head().getDouble(0)\n    val min_dead_event_count = dead_patients.head().getLong(1)\n    val max_dead_event_count = dead_patients.head().getLong(2)\n    \n    (avg_dead_event_count, max_dead_event_count, min_dead_event_count, avg_alive_event_count, max_alive_event_count, min_alive_event_count)\n}","user":"anonymous","dateUpdated":"2017-02-13T01:05:58-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nwarning: there were 5 deprecation warnings; re-run with -deprecation for details\n\nevent_count_metrics: (eve: org.apache.spark.rdd.RDD[Event], mor: org.apache.spark.rdd.RDD[Mortality])(Double, Double, Double, Double, Double, Double)\n"}]},"apps":[],"jobName":"paragraph_1486847799911_-184414891","id":"20170125-163824_794924019","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:05:58-0500","dateFinished":"2017-02-13T01:06:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2139"},{"title":"Encounter count is defined as the count of unique dates on which a given patient visited the ICU. ","text":"def encounter_count_metrics(eve: RDD[(Event)], mor: RDD[(Mortality)]) : (Double, Double, Double, Double, Double, Double) = {\n    \n    // TODO : Implement this function to return the encounter count metrics.\n    \n    val events_temp = eve.map(Event=> (Event.patientId,Event.category,new java.sql.Date((Event.date).asInstanceOf[java.util.Date].getTime))).toDF(\"patientid\",\"eventid\",\"time\")\n    val mortality_temp = mor.map(Mortality=>(Mortality.patientId, Mortality.label,new java.sql.Date((Mortality.mortality_date).asInstanceOf[java.util.Date].getTime))).toDF(\"patientid\", \"label\",\"time\")\n    \n    mortality_temp.registerTempTable(\"mortality\")\n    events_temp.registerTempTable(\"events\")\n    val alive = sqlContext.sql(\"select * from events where events.patientid not in (select mortality.patientid from mortality)\")\n    alive.registerTempTable(\"alive\")\n    val dead = sqlContext.sql(\"select * from events where events.patientid in (select mortality.patientid from mortality)\")\n    dead.registerTempTable(\"dead\")\n    \n    val alive_patient = sqlContext.sql(\"select avg(enc_count),min(enc_count), max(enc_count) from (select count(DISTINCT time) as enc_count from alive group by patientid)\")\n    val avg_alive_encounter_count = alive_patient.head().getDouble(0)\n    val min_alive_encounter_count = alive_patient.head().getLong(1)\n    val max_alive_encounter_count = alive_patient.head().getLong(2)\n    \n    val dead_patient = sqlContext.sql(\"select avg(enc_count),min(enc_count), max(enc_count) from (select count(DISTINCT time) as enc_count from dead group by patientid)\")\n    val avg_dead_encounter_count = dead_patient.head().getDouble(0)\n    val min_dead_encounter_count = dead_patient.head().getLong(1)\n    val max_dead_encounter_count = dead_patient.head().getLong(2)\n    \n    (avg_dead_encounter_count, max_dead_encounter_count, min_dead_encounter_count, avg_alive_encounter_count, max_alive_encounter_count, min_alive_encounter_count)\n}","user":"anonymous","dateUpdated":"2017-02-13T01:14:07-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nwarning: there were four deprecation warnings; re-run with -deprecation for details\n\nencounter_count_metrics: (eve: org.apache.spark.rdd.RDD[Event], mor: org.apache.spark.rdd.RDD[Mortality])(Double, Double, Double, Double, Double, Double)\n"}]},"apps":[],"jobName":"paragraph_1486847799913_-186723384","id":"20170126-094037_1369751422","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:14:08-0500","dateFinished":"2017-02-13T01:14:09-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2140"},{"title":"Testing Event Count - Don't change this cell","text":"\nval (avg_dead_event_count, max_dead_event_count, min_dead_event_count, avg_alive_event_count, max_alive_event_count, min_alive_event_count) = \nevent_count_metrics(eventsRDD, mortalityRDD)","user":"anonymous","dateUpdated":"2017-02-13T01:06:09-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\n\n\n\n\navg_dead_event_count: Double = 1029.059\nmax_dead_event_count: Double = 16829.0\nmin_dead_event_count: Double = 2.0\navg_alive_event_count: Double = 682.6474123539232\nmax_alive_event_count: Double = 12627.0\nmin_alive_event_count: Double = 1.0\n"}]},"apps":[],"jobName":"paragraph_1486847799913_-186723384","id":"20170125-164106_1373358169","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:06:09-0500","dateFinished":"2017-02-13T01:12:57-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2141"},{"title":"Populate the correct values in df_events dataframe","text":"case class eventRecord(Average_Event: Double , Max_Event: Double, Min_Event: Double, Mortality: String) \n\n\n// TODO - Fill in the correct values of minimum, maximum and average events for Alive and Dead Patients \nval df_events = Seq(eventRecord(avg_alive_event_count, max_alive_event_count, min_alive_event_count, \"Alive\"),eventRecord(avg_dead_event_count, max_dead_event_count, min_dead_event_count, \"Dead\")).toDF \ndf_events.registerTempTable(\"df_events\")\n","user":"anonymous","dateUpdated":"2017-02-13T01:13:28-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined class eventRecord\n\ndf_events: org.apache.spark.sql.DataFrame = [Average_Event: double, Max_Event: double ... 2 more fields]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1486847799915_-185953887","id":"20170126-095056_275615884","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:13:28-0500","dateFinished":"2017-02-13T01:13:30-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2142"},{"title":"Plot Event Count Grouped by Dead/Alive","text":"%sql\nselect * from df_events\n\n\n\n","user":"anonymous","dateUpdated":"2017-02-13T01:13:38-0500","config":{"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","colWidth":12,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"values":[{"name":"Average_Event","index":0,"aggr":"avg"},{"name":"Max_Event","index":1,"aggr":"max"},{"name":"Min_Event","index":2,"aggr":"min"}]},"helium":{}}},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}],"values":[{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Average_Event","index":0,"aggr":"sum"},"yAxis":{"name":"Max_Event","index":1,"aggr":"sum"}}}},"settings":{"params":{"maxAge":"30"},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Average_Event\tMax_Event\tMin_Event\tMortality\n682.6474123539232\t12627.0\t1.0\tAlive\n1029.059\t16829.0\t2.0\tDead\n"}]},"apps":[],"jobName":"paragraph_1486847799916_-187877631","id":"20170127-103258_1100387642","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:13:38-0500","dateFinished":"2017-02-13T01:13:39-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2143"},{"title":"Testing Encounter Count - Don't change any cell starting from this one","text":"val  (avg_dead_encounter_count, max_dead_encounter_count, min_dead_encounter_count, avg_alive_encounter_count, max_alive_encounter_count, min_alive_encounter_count) = encounter_count_metrics(eventsRDD, mortalityRDD)","user":"anonymous","dateUpdated":"2017-02-13T01:14:28-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486847799917_-188262380","id":"20170126-085842_586212247","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:14:28-0500","dateFinished":"2017-02-13T01:24:09-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2144","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\n\n\n\n\navg_dead_encounter_count: Double = 24.861\nmax_dead_encounter_count: Double = 375.0\nmin_dead_encounter_count: Double = 1.0\navg_alive_encounter_count: Double = 18.669449081803005\nmax_alive_encounter_count: Double = 391.0\nmin_alive_encounter_count: Double = 1.0\n"}]}},{"title":"Populate the correct values in df_encounters dataframe","text":"case class encounterRecord(Average_Encounter: Double , Max_Encounter: Double, Min_Encounter: Double, Mortality: String)\n\n\n\n// TODO - Fill in the correct values of minimum, maximum and average events for Alive and Dead Patients\nval df_encounter = Seq(encounterRecord(avg_alive_encounter_count, max_alive_encounter_count, min_alive_encounter_count, \"Alive\"), encounterRecord(avg_dead_encounter_count, max_dead_encounter_count, min_dead_encounter_count, \"Dead\")).toDF \ndf_encounter.registerTempTable(\"df_encounter\")\n","user":"anonymous","dateUpdated":"2017-02-13T01:24:21-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined class encounterRecord\n\ndf_encounter: org.apache.spark.sql.DataFrame = [Average_Encounter: double, Max_Encounter: double ... 2 more fields]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1486847799918_-187108133","id":"20170127-104258_320884595","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:24:21-0500","dateFinished":"2017-02-13T01:24:23-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2145"},{"title":"Plot Encounter Count Grouped by Dead/Alive","text":"%sql\nselect * from df_encounter ","user":"anonymous","dateUpdated":"2017-02-13T01:24:26-0500","config":{"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","colWidth":12,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"values":[{"name":"Average_Encounter","index":0,"aggr":"avg"},{"name":"Max_Encounter","index":1,"aggr":"max"},{"name":"Min_Encounter","index":2,"aggr":"min"}]},"helium":{}}},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}],"values":[{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Average_Encounter","index":0,"aggr":"sum"},"yAxis":{"name":"Max_Encounter","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Average_Encounter\tMax_Encounter\tMin_Encounter\tMortality\n18.669449081803005\t391.0\t1.0\tAlive\n24.861\t375.0\t1.0\tDead\n"}]},"apps":[],"jobName":"paragraph_1486847799919_-187492882","id":"20170127-113147_1780103981","dateCreated":"2017-02-11T16:16:39-0500","dateStarted":"2017-02-13T01:24:26-0500","dateFinished":"2017-02-13T01:24:26-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2146"},{"text":"","user":"anonymous","dateUpdated":"2017-02-11T18:50:32-0500","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486847799920_-177104662","id":"20170127-113337_1396101507","dateCreated":"2017-02-11T16:16:39-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2147"}],"name":"bdh_hw2_zeppelin","id":"2C9VBK96C","angularObjects":{"2CBCAE87D:shared_process":[],"2CATGVW7G:shared_process":[],"2C7UUWVG6:shared_process":[],"2CB7CBEYE:shared_process":[],"2CA9XYDQM:shared_process":[],"2C8CC97F7:shared_process":[],"2C8Z8VF97:shared_process":[],"2CA7PKKR8:shared_process":[],"2C9MBCBN3:shared_process":[],"2C891Q58M:shared_process":[],"2C82FPK23:shared_process":[],"2C9FZXRCS:shared_process":[],"2CAPDMKJP:shared_process":[],"2CA74T9ER:shared_process":[],"2C9BY4F3T:shared_process":[],"2CBESM5C4:shared_process":[],"2CA2HK59E:shared_process":[],"2C82NYDYS:shared_process":[],"2C9JKF5V3:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}